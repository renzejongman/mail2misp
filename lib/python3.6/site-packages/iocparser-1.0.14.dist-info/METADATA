Metadata-Version: 2.1
Name: iocparser
Version: 1.0.14
Summary: scrapes IOCs from plaintext
Home-page: https://github.com/renzejongman/iocparser
Author: Renze Jongman
Author-email: info@renzejongman.nl
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown

# IOC-parser 
IOC-Parser is a script that will extract the IOCs from a given (text-based) file and output it in .csv-format. Or - as a module - returns a list of instances with an IOC-value and an IOC-type.

### Installation 
* as a module: `pip install iocparser`
* as a stand-alone script: `git clone https://github.com/renzejongman/iocparser`

### Usage 
`./iocparser.py -s [source-file] -o [outputfile.csv]`

### Use in a custom script
```
from iocparser import IOCParser
textObj = IOCParser("text")
results = textObj.parse()
```

### Classes 
* `.IOC(kind, value)` </br>
Instances of this very simple class are generated by the IOCParser class. </br>
`kind` 	= _"IP", "uri", "md5", "sha1", "sha256", "CVE", "email" or "file"_ </br>
`value`	= _The value of the IOCParser-class and returned as a list._ </br>

* `.IOCParser(text)`
This class takes a text as input, extracts all the IOCs and returns them as a list of instances of the IOC-class. </br>
`text` 	= _the raw text (as a variable) to be parsed._ </br>

### Other files
* `extensions`:	_the file extensions needed to detect a filename (and not mistake them for URIs)_
* `tlds`:		_the Top Level Domains (TLDs) needed to recognise URI`s (and not mistake them for files)_ </br>
_feel free to manipulate those files, but make sure there are no empty lines in either of them, or the script will break._

